{"remainingRequest":"/Users/thuybui/Documents/Workplace/snowcoop-app/node_modules/babel-loader/lib/index.js!/Users/thuybui/Documents/Workplace/snowcoop-app/node_modules/eslint-loader/index.js??ref--13-0!/Users/thuybui/Documents/Workplace/snowcoop-app/src/components/pages/register-page/register-page.component.js?vue&type=script&lang=js&","dependencies":[{"path":"/Users/thuybui/Documents/Workplace/snowcoop-app/src/components/pages/register-page/register-page.component.js","mtime":1552102547960},{"path":"/Users/thuybui/Documents/Workplace/snowcoop-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/thuybui/Documents/Workplace/snowcoop-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/thuybui/Documents/Workplace/snowcoop-app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["export default {\n  name: 'registerPage',\n  data: function data() {\n    var _this = this;\n\n    var passwordVadlidate = function passwordVadlidate(rule, value, callback) {\n      if (value === '') {\n        callback(new Error('Please input the password'));\n      } else {\n        if (_this.formData.passwordConfirm !== '') {\n          _this.$refs.formData.validateField('passwordConfirm');\n        }\n\n        callback();\n      }\n    };\n\n    var confirmValidate = function confirmValidate(rule, value, callback) {\n      if (value === '') {\n        callback(new Error('Please input the password again'));\n      } else if (value !== _this.formData.password) {\n        callback(new Error('Two inputs don\\'t match!'));\n      } else {\n        callback();\n      }\n    };\n\n    return {\n      formData: {\n        firstName: null,\n        lastName: null,\n        email: null,\n        password: null,\n        passwordConfirm: null\n      },\n      rules: {\n        firstName: [{\n          required: true,\n          message: 'Please input first name',\n          trigger: 'blur'\n        }],\n        lastName: [{\n          required: true,\n          message: 'Please input last name',\n          trigger: 'blur'\n        }],\n        email: [{\n          required: true,\n          message: 'Please input email address',\n          trigger: 'blur'\n        }, {\n          type: 'email',\n          message: 'Please input correct email address',\n          trigger: ['blur', 'change']\n        }],\n        password: [{\n          required: true,\n          message: 'Please input password',\n          trigger: 'blur'\n        }, {\n          validator: passwordVadlidate,\n          trigger: 'blur'\n        }],\n        passwordConfirm: [{\n          required: true,\n          message: 'Please input password',\n          trigger: 'blur'\n        }, {\n          validator: confirmValidate,\n          trigger: 'blur'\n        }]\n      },\n      isFormValidated: false\n    };\n  },\n  methods: {\n    updateIsFormValidated: function updateIsFormValidated() {\n      var fields = this.$refs.formData.fields;\n      this.isFormValidated = fields.reduce(function (acc, field) {\n        var valid = field.isRequired && field.validateState === 'success';\n        var noError = !field.isRequired && field.validateState !== 'error';\n        return acc && (valid || noError);\n      }, true);\n    },\n    register: function register() {\n      var _this2 = this;\n\n      if (this.isFormValidated) {\n        var newUser = {\n          firstName: this.formData.firstName,\n          lastName: this.formData.lastName,\n          email: this.formData.email,\n          password: this.formData.password\n        };\n        this.$store.dispatch('REGISTER', newUser).then(function (user) {\n          return _this2.onRegisterSuccessful(user);\n        }, function (error) {\n          return _this2.onRegisterFailed(error);\n        });\n      }\n    },\n    onRegisterSuccessful: function onRegisterSuccessful(user) {\n      if (!user) {\n        throw new Error('Something went wrong!');\n      }\n\n      this.$router.push('dashboard');\n    },\n    onRegisterFailed: function onRegisterFailed(error) {\n      /* eslint-disable*/\n      console.error(error);\n    }\n  }\n};",{"version":3,"sources":["/Users/thuybui/Documents/Workplace/snowcoop-app/src/components/pages/register-page/register-page.component.js"],"names":["name","data","passwordVadlidate","rule","value","callback","Error","formData","passwordConfirm","$refs","validateField","confirmValidate","password","firstName","lastName","email","rules","required","message","trigger","type","validator","isFormValidated","methods","updateIsFormValidated","fields","reduce","acc","field","valid","isRequired","validateState","noError","register","newUser","$store","dispatch","then","user","onRegisterSuccessful","error","onRegisterFailed","$router","push","console"],"mappings":"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","sourcesContent":["export default {\n  name: 'registerPage',\n  data () {\n    var passwordVadlidate = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('Please input the password'))\n      } else {\n        if (this.formData.passwordConfirm !== '') {\n          this.$refs.formData.validateField('passwordConfirm')\n        }\n        callback()\n      }\n    }\n    var confirmValidate = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('Please input the password again'))\n      } else if (value !== this.formData.password) {\n        callback(new Error('Two inputs don\\'t match!'))\n      } else {\n        callback()\n      }\n    }\n\n    return {\n      formData: {\n        firstName: null,\n        lastName: null,\n        email: null,\n        password: null,\n        passwordConfirm: null\n      },\n      rules: {\n        firstName: [\n          { required: true, message: 'Please input first name', trigger: 'blur' }\n        ],\n        lastName: [\n          { required: true, message: 'Please input last name', trigger: 'blur' }\n        ],\n        email: [\n          { required: true, message: 'Please input email address', trigger: 'blur' },\n          { type: 'email', message: 'Please input correct email address', trigger: ['blur', 'change'] }\n        ],\n        password: [\n          { required: true, message: 'Please input password', trigger: 'blur' },\n          { validator: passwordVadlidate, trigger: 'blur' }\n        ],\n        passwordConfirm: [\n          { required: true, message: 'Please input password', trigger: 'blur' },\n          { validator: confirmValidate, trigger: 'blur' }\n        ]\n      },\n      isFormValidated: false\n    }\n  },\n  methods: {\n    updateIsFormValidated () {\n      const fields = this.$refs.formData.fields\n      this.isFormValidated = fields.reduce((acc, field) => {\n        const valid = (field.isRequired && field.validateState === 'success')\n        const noError = (!field.isRequired && field.validateState !== 'error')\n        return acc && (valid || noError)\n      }, true)\n    },\n    register () {\n      if (this.isFormValidated) {\n        const newUser = {\n          firstName: this.formData.firstName,\n          lastName: this.formData.lastName,\n          email: this.formData.email,\n          password: this.formData.password\n        };\n\n        this.$store.dispatch('REGISTER', newUser).then(\n          (user) => this.onRegisterSuccessful(user),\n          (error) => this.onRegisterFailed(error)\n        );\n      }\n    },\n    onRegisterSuccessful (user) {\n      if (!user) {\n        throw new Error('Something went wrong!');\n      }\n      this.$router.push('dashboard');\n},\n\n    onRegisterFailed (error) {\n      /* eslint-disable*/\n      console.error(error)\n    }\n  }\n}"]}]}